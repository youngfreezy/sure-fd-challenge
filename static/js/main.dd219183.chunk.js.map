{"version":3,"sources":["components/InputField/InputField.js","components/AddressForm/AddressForm.js","components/RatingInformationForm/RatingInformationForm.js","utils/utils.js","components/QuoteOverViewHeader/QuoteOverViewHeader.js","components/QuoteOverViewVariableOptions/QuoteOverViewVariableOptions.js","components/QuoteError/QuoteError.js","components/QuoteOverView/QuoteOverView.js","App.js","serviceWorker.js","index.js"],"names":["InputField","label","id","onChange","error","className","InputLabel","htmlFor","Input","AddressForm","addressState","submitted","FormControl","RatingInformationForm","handleSubmit","history","useHistory","useState","setSubmit","onSubmit","e","preventDefault","requiredKeys","i","length","hasAllRequiredProperties","push","FormHelperText","Button","type","color","QuoteOverViewHeader","quote","get","policy_holder","first_name","premium","Object","keys","variable_selections","map","key","QuoteOverViewVariableOptions","makeChangesButtonClicked","handleClick","deductibleValue","setDeductibleValue","collisionValue","setCollisionValue","onClick","variable_options","option","title","description","Select","value","values","event","target","item","MenuItem","QuoteError","err","JSON","stringify","errors","QuoteOverView","setmakeChangesButtonClicked","quoteExists","quoteId","App","progress","setProgress","loading","setLoading","useEffect","timer","setInterval","oldProgress","clearInterval","useReducer","field","dispatch","setQuote","to","exact","path","last_name","request","address","fetch","method","headers","Accept","body","then","response","json","res","catch","CircularProgress","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.dd219183.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InputField.css\";\n\nimport { InputLabel, Input } from \"@material-ui/core\";\n\nfunction InputField({ label, id, onChange, error }) {\n  return (\n    <div className=\"input-field\">\n      <InputLabel error={error} htmlFor={id}>\n        {label}\n      </InputLabel>\n      <Input id={id} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default InputField;\n","import React from \"react\";\nimport \"./AddressForm.css\";\nimport { FormControl } from \"@material-ui/core\";\nimport InputField from \"../InputField/InputField\";\n\nfunction AddressForm({ onChange, addressState, submitted }) {\n  return (\n    <div className=\"address-form\">\n      <FormControl>\n        <InputField\n          label=\"Address\"\n          id=\"line_1\"\n          onChange={onChange}\n          error={submitted && !addressState[\"line_1\"]}\n        />\n      </FormControl>\n\n      <FormControl>\n        <InputField label=\"Line 2\" id=\"line_2\" onChange={onChange} />\n      </FormControl>\n      <FormControl>\n        <InputField\n          label=\"City\"\n          id=\"city\"\n          onChange={onChange}\n          error={submitted && !addressState[\"city\"]}\n        />\n      </FormControl>\n      <FormControl>\n        <InputField\n          label=\"Region\"\n          id=\"region\"\n          onChange={onChange}\n          error={submitted && !addressState[\"region\"]}\n        />\n      </FormControl>\n      <FormControl>\n        <InputField\n          label=\"Postal\"\n          id=\"postal\"\n          onChange={onChange}\n          error={submitted && !addressState[\"postal\"]}\n        />\n      </FormControl>\n    </div>\n  );\n}\n\nexport default AddressForm;\n","import React, { useState } from \"react\";\nimport { FormControl, Button } from \"@material-ui/core\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport AddressForm from \"../AddressForm/AddressForm\";\nimport InputField from \"../InputField/InputField\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./RatingInformationForm.css\";\nimport { hasAllRequiredProperties } from \"../../utils/utils\";\n\nfunction RatingInformationForm({ onChange, addressState, handleSubmit }) {\n  const history = useHistory();\n  const [submitted, setSubmit] = useState(false);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        setSubmit(true);\n        if (hasAllRequiredProperties(addressState)) {\n          handleSubmit(e);\n          history.push(\"/quote\");\n        }\n      }}\n    >\n      <div className=\"rating-form\">\n        <FormControl>\n          <InputField\n            label=\"First Name\"\n            id=\"first_name\"\n            onChange={onChange}\n            error={submitted && !addressState[\"first_name\"]}\n          />\n        </FormControl>\n        <FormControl>\n          <InputField\n            label=\"Last Name\"\n            id=\"last_name\"\n            onChange={onChange}\n            error={submitted && !addressState[\"last_name\"]}\n          />\n        </FormControl>\n        <AddressForm\n          onChange={onChange}\n          addressState={addressState}\n          submitted={submitted}\n        />\n        <FormHelperText id=\"helper-text\">\n          We'll never share your personal information.\n        </FormHelperText>\n      </div>\n      <Button id=\"submit\" type=\"submit\" color=\"primary\">\n        Submit\n      </Button>\n    </form>\n  );\n}\n\nexport default RatingInformationForm;\n","export function  hasAllRequiredProperties (addressState)  {\n    let requiredKeys = [\n      \"first_name\",\n      \"last_name\",\n      \"line_1\",\n      \"city\",\n      \"region\",\n      \"postal\"\n    ];\n    for (var i = 0; i < requiredKeys.length; i++) {\n      if (!addressState[requiredKeys[i]]) {\n        return false;\n      }\n    }\n    return true;\n  };","import React from \"react\";\nimport \"./QuoteOverViewHeader.css\";\nimport get from \"lodash/get\";\n\nfunction QuoteOverViewHeader({ quote }) {\n  return (\n    <div>\n      {get(quote, \"premium\") && (\n        <div>\n          Hi <strong>{quote.policy_holder.first_name}!</strong>\n          <i>\n            <h5>\n              Your current premium is:{\" \"}\n              <span className=\"value\">{quote.premium}</span>\n            </h5>\n          </i>\n        </div>\n      )}\n\n      {get(quote, \"variable_selections\") &&\n        Object.keys(quote.variable_selections).map((key, i) => {\n          return (\n            <i key={i}>\n              <h5>\n                <div>\n                  Your {key} is:{\" \"}\n                  <span className=\"value\">\n                    {quote.variable_selections[key]}\n                  </span>\n                </div>\n              </h5>\n            </i>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default QuoteOverViewHeader;\n","import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport get from \"lodash/get\";\n\nimport \"./QuoteOverViewVariableOptions.css\";\nfunction QuoteOverViewVariableOptions({\n  quote,\n  makeChangesButtonClicked,\n  handleClick\n}) {\n  const [deductibleValue, setDeductibleValue] = useState(\"\");\n  const [collisionValue, setCollisionValue] = useState(\"\");\n  const handleChange = (event, title) => {\n    if (title === \"Deductible\") {\n      setDeductibleValue(event.target.value);\n    } else {\n      setCollisionValue(event.target.value);\n    }\n  };\n\n  return (\n    <div>\n      {!makeChangesButtonClicked && (\n        <Button\n          className=\"variable-selection-button\"\n          color=\"primary\"\n          onClick={handleClick}\n        >\n          Make Changes\n        </Button>\n      )}\n\n      <div className=\"variable-options\">\n        {makeChangesButtonClicked &&\n          Object.keys(get(quote, \"variable_options\"))\n            .map(key => quote.variable_options[key])\n            .map((option, i) => {\n              if (option) {\n                return (\n                  <div key={i} className=\"variable-option\">\n                    <div className={\"option-row\"}>\n                      {option.title}: {option.description}\n                    </div>\n\n                    <div className=\"select-text\">\n                      <i>Select a new option below: </i>\n                    </div>\n\n                    <Select\n                      className={`select-option`}\n                      value={\n                        option.title === \"Deductible\"\n                          ? deductibleValue || option.values[0]\n                          : collisionValue || option.values[0]\n                      }\n                      onChange={e => {\n                        handleChange(e, option.title);\n                      }}\n                    >\n                      {option.values.map((item, i) => {\n                        return (\n                          <MenuItem value={item} key={i}>\n                            {item}\n                          </MenuItem>\n                        );\n                      })}\n                    </Select>\n                  </div>\n                );\n              }\n\n              return null;\n            })}\n      </div>\n      <div>\n        {makeChangesButtonClicked && (\n          <Button color=\"primary\" onClick={handleClick}>\n            Cancel Changes\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default QuoteOverViewVariableOptions;\n","import React from \"react\";\n\nfunction QuoteError({ err }) {\n  return (\n    <div>\n      <div>There was the following error(s) loading the quote: </div>\n\n      <div>\n        <pre>{JSON.stringify(err.errors, null, 4)}</pre>\n      </div>\n    </div>\n  );\n}\n\nexport default QuoteError;\n","import React, { useState } from \"react\";\n// import mockQuote from \"./mockQuote\";\nimport QuoteOverViewHeader from \"../QuoteOverViewHeader/QuoteOverViewHeader\";\nimport QuoteOverViewVariableOptions from \"../QuoteOverViewVariableOptions/QuoteOverViewVariableOptions\";\nimport QuoteError from \"../QuoteError/QuoteError\";\nfunction QuoteOverView({ quote }) {\n  //for testing, uncomment to avoid submitting post request in previous screen\n  // quote = mockQuote;\n  // some fun things I could to extend functionaliity\n  // save what the user entered in the form, as well as the quote info, and preserve it on back button/forward button press\n  // unless of course user changes whats entered in the form\n\n  const [makeChangesButtonClicked, setmakeChangesButtonClicked] = useState(\n    false\n  );\n\n  const handleClick = () => {\n    setmakeChangesButtonClicked(!makeChangesButtonClicked);\n  };\n  const quoteExists = quote.quoteId && !quote.err;\n  \n  //I'm aware that this iteration with two maps is o^n squared\n  //but since it's only two options I went with this approach\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        //TBD\n      }}\n    >\n      {!quoteExists && quote.err && <QuoteError err={quote.err} />}\n      {quoteExists && <QuoteOverViewHeader quote={quote} />}\n      {quoteExists && (\n        <QuoteOverViewVariableOptions\n          quote={quote}\n          makeChangesButtonClicked={makeChangesButtonClicked}\n          handleClick={handleClick}\n        />\n      )}\n    </form>\n  );\n}\n\nexport default QuoteOverView;\n","import React, { useReducer, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"typeface-roboto\";\nimport RatingInformationForm from \"./components/RatingInformationForm/RatingInformationForm\";\nimport QuoteOverView from \"./components/QuoteOverView/QuoteOverView\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nfunction App() {\n  const [progress, setProgress] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    function tick() {\n      // reset when reaching 100%\n      setProgress(oldProgress => (oldProgress >= 100 ? 0 : oldProgress + 1));\n    }\n\n    const timer = setInterval(tick, 20);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  function addressReducer(addressState, { field, value }) {\n    return { ...addressState, [field]: value };\n  }\n\n  const [addressState, dispatch] = useReducer(addressReducer, {});\n  const [quote, setQuote] = useState({});\n  const onChange = e => {\n    dispatch({ field: e.target.id, value: e.target.value });\n  };\n\n  const handleSubmit = e => {\n    let { first_name, last_name, ...address } = addressState;\n    const request = { address, first_name, last_name };\n    setLoading(true);\n    fetch(\"https://fed-challenge-api.sure.now.sh/api/v1/quotes\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(request)\n    })\n      .then(response => response.json())\n      .then(res => {\n        setLoading(false);\n        if (!res.quote) {\n          throw res;\n        } else {\n          setQuote(res.quote);\n        }\n        \n      })\n      .catch(err => {\n        setQuote({ err });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/quote\">Quote</Link>\n          </li>\n        </ul>\n\n        <hr />\n        <Switch>\n          <Route exact path=\"/\">\n            <RatingInformationForm\n              onChange={onChange}\n              addressState={addressState}\n              handleSubmit={handleSubmit}\n            />\n          </Route>\n          <Route path=\"/quote\">\n            {loading ? (\n              <CircularProgress variant=\"determinate\" value={progress} />\n            ) : null}\n            <QuoteOverView quote={quote} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}